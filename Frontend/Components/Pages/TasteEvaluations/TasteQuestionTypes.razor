@page "/taste/questions/types"
@using Frontend.DtoClasses
@using Frontend.Helpers
@using Frontend.Services
@using global::Helpers
@attribute [StreamRendering]
@inject Frontend.Services.TasteQuestionTypeService TasteQuestionTypeService
@inject Frontend.Services.EventService EventService
@inject ApiHelper ApiHelper
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Tasting Question Types</PageTitle>

<nav aria-label="Breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item">
            <a href="/taste">Wine Tasting</a>
        </li>
        <li class="breadcrumb-item">
            <a>Question Types</a>
        </li>
    </ol>
</nav>

<h3>
    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 28 28" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-clipboard-pen"><rect width="8" height="4" x="8" y="2" rx="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5"/><path d="M4 13.5V6a2 2 0 0 1 2-2h2"/><path d="M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"/></svg>
    <span>Question Types</span>
</h3>
<p>Choose the type of questions that can be created.</p>

<hr class="hr" />

<!-- Alert -->
<div class="alert visually-hidden" role="alert" id="tasteQuestionType_alert">
    MESSAGE_HERE
</div>

<div class="d-flex w-100 gap-4 align-items-center">
    @if (_tasteQuestionTypes == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (_tasteQuestionTypes.Count == 0)
    {
        <p>
            <em>No question types found.</em>
        </p>
    } 
    else {
        @foreach (var _type in _tasteQuestionTypes)
        {
            <div class="card">
                <div class="card-header text-capitalize">
                    @_type.Type
                </div>
                <div class="card-body">
                    <div class="card-text">
                        Example usage in the form:<br/>
                        <div class="d-flex flex-column gap-2 mt-2">
                            <label>
                                <input type="@_type.Type" name="@_type.Type"/>
                                <span text-capitalize>@_type.Type 1</span>
                            </label>
                            <label>
                                <input type="@_type.Type" name="@_type.Type"/>
                                <span text-capitalize>@_type.Type 2</span>
                            </label>
                            <label>
                                <input type="@_type.Type" name="@_type.Type"/>
                                <span text-capitalize>@_type.Type 3</span>
                            </label>
                        </div>
                    </div>
                    <div class="d-flex flex-row gap-3 mt-3">
                        <button class="btn btn-sm btn-primary w-100" data-bs-target="#tasteQuestionType_edit" data-bs-toggle="modal" @onclick="() => { SetQuestionTypeEditParameters(_type.Type, _type.TasteQuestionTypeId); }">Edit</button>
                        <button class="btn btn-sm btn-danger w-100" data-bs-target="#tasteQuestionType_delete" data-bs-toggle="modal" @onclick="() => { SetQuestionTypeDeleteParameters(_type.Type, _type.TasteQuestionTypeId); }">Delete</button>
                    </div>
                </div>
            </div>
        }   
    }
</div>

<div class="mt-3">
    <a class="w-100 btn btn-primary rounded-0 btn-block" data-bs-target="#tasteQuestionType_createModal" data-bs-toggle="modal">Create new type</a>
</div>

<!-- Modals -->
<div class="modal fade" id="tasteQuestionType_createModal" tabindex="-1" aria-labelledby="tasteQuestionsType_label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form>
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="tasteQuestionsType_label">Add a new question type</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="tasteQuestionType_create_type" class="form-label">Type</label>
                        <select class="form-select" @bind="_tasteQuestionType">
                            <option value="" selected>-- Choose a question type --</option>
                            <option value="text">Text</option>
                            <option value="number">Number</option>
                            <option value="date">Date</option>
                            <option value="time">Time</option>
                            <option value="datetime">Date and time</option>
                            <option value="range">Range</option>
                            <option value="color">Color</option>
                            <option value="email">Email</option>
                            <option value="tel">Telephone</option>
                            <option value="url">URL</option>
                            <option value="password">Password</option>
                            <option value="checkbox">Checkbox</option>
                            <option value="radio">Radio</option>
                            <option value="select">Select</option>
                            <option value="textarea">Textarea</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => { CreateTasteQuestionType(); }">Confirm</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="tasteQuestionType_delete" tabindex="-1" aria-labelledby="tasteQuestionsType_label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="tasteQuestionsType_label">Deletion confirmation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Do you really wish to delete the taste question:<br/>
                <code>"<span id="tasteQuestions_delTypete_name">@_tasteQuestionType</span>"</code>
            </div>
            <div class="modal-footer">
                <form>
                    <input type="hidden" id="tasteQuestions_id" value="@_tasteQuestionTypeId" />
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => { DeleteQuestionType(_tasteQuestionTypeId); }">Confirm</button>
                </form>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="tasteQuestionType_edit" tabindex="-1" aria-labelledby="tasteQuestionsType_label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form>
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="tasteQuestionsType_label">Edit question type</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="tasteQuestionType_edit_type" class="form-label">Type</label>
                        <select class="form-select" @bind="_tasteQuestionType">
                            <option value="" selected>-- Choose a question type --</option>
                            <option value="text">Text</option>
                            <option value="number">Number</option>
                            <option value="date">Date</option>
                            <option value="time">Time</option>
                            <option value="datetime">Date and time</option>
                            <option value="range">Range</option>
                            <option value="color">Color</option>
                            <option value="email">Email</option>
                            <option value="tel">Telephone</option>
                            <option value="url">URL</option>
                            <option value="password">Password</option>
                            <option value="checkbox">Checkbox</option>
                            <option value="radio">Radio</option>
                            <option value="select">Select</option>
                            <option value="textarea">Textarea</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                        <input type="hidden" id="tasteQuestionType_editID" value="@_tasteQuestionTypeId" />
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => { EditTasteQuestionType(); }">Confirm</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function SendAlert(alertID, message, type) {
        const alert = document.getElementById(alertID);
        alert.classList.remove('visually-hidden');
        alert.classList.add(`alert-${type}`);

        if (type === 'success') {
            message = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-check me-3"><path d="M18 6 7 17l-5-5"/><path d="m22 10-7.5 7.5L13 16"/></svg>' + message;
        } else if (type === 'danger') {
            message = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 28 28" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x me-3"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>' + message;
        } else {
            message = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 28 28" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-triangle-alert me-3"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>' + message;
        }

        alert.innerHTML = message;
    }

    function CloseAlert(alertID) {
        const alert = document.getElementById(alertID);
        alert.classList.add('visually-hidden');
    }

    function setTypes(types, events) {
        window._tasteQuestionTypes = types;
    }
</script>

@code {
    // TODO: Check if user is an administrator or a regular user

    private List<TasteQuestionTypeDto>? _tasteQuestionTypes;
    private string _tasteQuestionType = "";
    private Guid _tasteQuestionTypeId = Guid.Empty;
    
    private void SetQuestionTypeDeleteParameters(string type, Guid id)
    {
        _tasteQuestionType = type;
        _tasteQuestionTypeId = id;
    }
    
    private void SetQuestionTypeEditParameters(string type, Guid id)
    {
        _tasteQuestionType = type;
        _tasteQuestionTypeId = id;
    }
    
    private async Task CreateTasteQuestionType()
    {
        if(_tasteQuestionType == "")
        {
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "Please fill all the fields.", "warning");
            return;
        }

        if (_tasteQuestionTypes.Any(_type => _tasteQuestionType == _type.Type))
        {
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "That type already exists!", "danger");
            return;
        }
        
        if (TasteQuestionTypeService.Create(new TasteQuestionTypeDto() { Type = _tasteQuestionType }))
        {
            JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "The question type was created successfully!", "success");
            await LoadTasteQuestionTypes();
            StateHasChanged();
        }
        else
            JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "There was an error creating the question type.", "danger");
    }
    
    private async Task EditTasteQuestionType()
    {
        if (_tasteQuestionType == "")
        {
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "Please fill all the fields.", "warning");
            return;
        }
        
        if (_tasteQuestionTypes.Any(_type => _tasteQuestionType == _type.Type))
        {
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "That type already exists!", "danger");
            return;
        }
        
        if (TasteQuestionTypeService.Update(_tasteQuestionTypeId, new TasteQuestionTypeDto() { Type = _tasteQuestionType }))
        {
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "The question was edited successfully!", "success");
            await LoadTasteQuestionTypes();
            StateHasChanged();
        }
        else
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "There was an error editing the question.", "danger");
    }
    
    
    private async Task DeleteQuestionType(Guid id)
    {
        if (TasteQuestionTypeService.Delete(id))
        {
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "The question was deleted successfully!", "success");
            await LoadTasteQuestionTypes();
            StateHasChanged();
        }
        else
            await JS.InvokeAsync<string>("SendAlert", "tasteQuestionType_alert", "There was an error deleting the question.", "danger");
    }
    
    private async Task LoadTasteQuestionTypes()
    {
        _tasteQuestionTypes = await TasteQuestionTypeService.Get();
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadTasteQuestionTypes();
            _tasteQuestionTypes = await TasteQuestionTypeService.Get();
            await JS.InvokeAsync<string>("setTypes", _tasteQuestionTypes);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error has occurred: {ex.Message} | {ex.InnerException}");
            _tasteQuestionTypes = null;
        }
    }
}
