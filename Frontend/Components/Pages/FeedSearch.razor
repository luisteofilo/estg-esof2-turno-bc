@page "/Feed/Search/{searchTerm?}"
@using Frontend.Helpers
@using global::Helpers.ViewModels
@using Microsoft.IdentityModel.Tokens
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@inject ApiHelper ApiHelper

<h3>Search for posts</h3>


<div id="searchbar">
    <label>
        Search:
        <input @bind="SearchTerm" @bind:event="onchange" @bind:after="SearchForPosts"/>
    </label>
</div>
<hr/>
<div>
    @if (_feedPosts.Posts == null || _feedPosts.Posts.Count == 0)
    {
        @if (SearchTerm.IsNullOrEmpty())
        {
            <h5>Search for hashtags or user emails.</h5>
        }
        else
        {
            @if (LoadingPosts)
            {
                <i>Loading...</i>
            }
            else
            {
                <h5>No posts found</h5>
            }
        }
    }
    else
    {
        @foreach (var p in _feedPosts.Posts)
        {
            <Post PostLine="p"/>
        }
    }
</div>

@code {
    [Parameter] public string SearchTerm { get; set; } = "";
    private FeedPostList _feedPosts = new() { Posts = new List<FeedPost>() };
    private bool LoadingPosts = false;
    // private Timer delayTimer = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async void SearchForPosts()
    {
        // delayTimer?.Dispose();
        // delayTimer = new Timer(async (state) =>
        // {
            await LoadPosts();
        // }, null, 1000, Timeout.Infinite);
    }

    private async Task LoadPosts()
    {
        LoadingPosts = true;
        try
        {
            var posts = new List<FeedPost>();
            if (!SearchTerm.IsNullOrEmpty())
            {
                if (SearchTerm[0] == '#')
                {
                    posts = await ApiHelper.GetFromApiAsync<List<FeedPost>>(
                        $"api/Post/index/hashtag/name/{SearchTerm[1..].ToLowerInvariant()}");
                }
                else
                {
                    posts = await ApiHelper.GetFromApiAsync<List<FeedPost>>(
                        $"api/Post/index/user/email/{SearchTerm.ToLowerInvariant()}");
                }

                if (posts != null)
                {
                    _feedPosts.Posts = posts;
                }
                StateHasChanged();
            }
        }
        catch (ApplicationException ex)
        {
            Console.Error.WriteLine($"Failed to fetch posts: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
        LoadingPosts = false;
    }

}