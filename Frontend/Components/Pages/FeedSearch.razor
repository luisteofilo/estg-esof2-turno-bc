@page "/Feed/Search/{searchTerm?}"
@using Frontend.Helpers
@using global::Helpers.ViewModels
@using Microsoft.IdentityModel.Tokens
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@inject ApiHelper ApiHelper

<div class="post">
    <div class="post-header">
        <div class="post-info">
            <div style="text-align: center;">Posts Search</div>
        </div>
    </div>
</div>
<div class="search">
    <div class="input-group flex-wrap mb-1">
        <input @bind="SearchTerm" @bind:event="onchange" @bind:after="SearchForPosts" placeholder="Type Hashtag or user email" class="form-control" aria-describedby="basic-addon" />
        <button class="input-group-text" id="basic-addon" @onclick="ClearInput">🔎</button>
    </div>
</div>

<hr/>
<div>
    @if (_feedPosts.Posts == null || _feedPosts.Posts.Count == 0)
    {
        @if (SearchTerm.IsNullOrEmpty())
        {
            <i>No posts available</i>
        }
        else
        {
            <i>No posts available</i>
        }
    }
    else
    {
        @foreach (FeedPost p in _feedPosts.Posts)
        {
            <Post PostLine="p"/>
        }
    }
</div>

@code {
    [Parameter] public string SearchTerm { get; set; } = "";
    private FeedPostList _feedPosts = new FeedPostList(){Posts = new List<FeedPost>()};

    private Timer debounceTimer;

    private void ClearInput()
    {
        SearchTerm = string.Empty;
    }
    
    protected override async Task OnInitializedAsync()
    {
        debounceTimer?.Dispose();
        debounceTimer = new Timer(async (state) =>
        {
            await LoadPosts();
        }, null, 1000, Timeout.Infinite);
    }

    private async Task SearchForPosts()
    {
        
        await LoadPosts();
    }
    
    private async Task LoadPosts()
    {
        try
        {
            var posts = new List<FeedPost>();
            if (SearchTerm[0] == '#')
            {
                posts = await ApiHelper.GetFromApiAsync<List<FeedPost>>(
                    $"api/Post/index/hashtag/name/{SearchTerm[1..].ToLowerInvariant()}");
            }
            else
            {
                posts = await ApiHelper.GetFromApiAsync<List<FeedPost>>(
                    $"api/Post/index/user/email/{SearchTerm.ToLowerInvariant()}");
            }
            if (posts != null)
            {
                _feedPosts.Posts = posts;
            }
        }
        catch (ApplicationException ex)
        {
            Console.Error.WriteLine($"Failed to fetch posts: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }
}