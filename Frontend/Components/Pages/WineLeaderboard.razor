@page "/wineleaderboard"
@using Frontend.DtoClasses
@using Frontend.Services
@attribute [StreamRendering]
@inject WineLeaderboardService WineLeaderboardService
@inject RegionService RegionService
@rendermode InteractiveServer

<PageTitle>Wine Leaderboard</PageTitle>

<h3>Wine Leaderboard</h3>

<div>
    <label for="regionSelect">Select Region:</label>
    <InputSelect id="regionSelect" @bind-Value="_selectedRegionId">
        <option value="">All Regions</option>
        @foreach (var region in _regions)
        {
            <option value="@region.RegionId">@region.Name</option>
        }
    </InputSelect>
    <button @onclick="FilterByRegion">Filter</button>
</div>

<hr class="hr" />

@if (_wineLeaderboard == null || !_wineLeaderboard.Any())
{
    <p><em>No data available.</em></p>
}
else
{
    <div>
        <button @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <button @onclick="NextPage" disabled="@(_currentPage == TotalPages)">Next</button>
        <span> Page @(_currentPage) of @(TotalPages) </span>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
            <tr>
                <th>Rank</th>
                <th>Label</th>
                <th>Region</th>
                <th>Events Participated</th>
                <th>Total Evaluations</th>
                <th>Average Score</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var wine in PagedLeaderboard)
            {
                <tr>
                    <td>@(GetGlobalRank(wine))</td>
                    <td>@wine.Label</td>
                    <td>@wine.RegionName</td>
                    <td>@wine.EventsParticipated</td>
                    <td>@wine.TotalEvaluations</td>
                    <td>@wine.AverageScore.ToString("F2")</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private List<WineLeaderboardDto> _wineLeaderboard = new List<WineLeaderboardDto>();
    private List<RegionDto> _regions = new List<RegionDto>();
    private Guid? _selectedRegionId;
    private int _currentPage = 1;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _regions = await RegionService.GetRegionsAsync();
            await LoadLeaderboard();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialization error: {ex.Message} | {ex.StackTrace}");
        }
    }

    private async Task FilterByRegion()
    {
        try
        {
            await LoadLeaderboard();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Filtering error: {ex.Message} | {ex.StackTrace}");
        }
    }

    private async Task LoadLeaderboard()
    {
        _wineLeaderboard = await WineLeaderboardService.GetLeaderboardByRegionAsync(_selectedRegionId);
        _currentPage = 1;
        StateHasChanged();
    }

    private IEnumerable<WineLeaderboardDto> PagedLeaderboard =>
        _wineLeaderboard.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private int TotalPages => (int)Math.Ceiling((double)_wineLeaderboard.Count / PageSize);

    private int CurrentPage
    {
        get => _currentPage;
        set
        {
            if (value >= 1 && value <= TotalPages)
            {
                _currentPage = value;
                StateHasChanged();
            }
        }
    }

    private void NextPage()
    {
        if (_currentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            CurrentPage--;
        }
    }

    private int GetGlobalRank(WineLeaderboardDto wine)
    {
        return _wineLeaderboard.IndexOf(wine) + 1;
    }
}
