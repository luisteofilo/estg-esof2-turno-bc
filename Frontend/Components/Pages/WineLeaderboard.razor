@page "/wineleaderboard"
@using Frontend.DtoClasses
@using Frontend.Helpers
@using Frontend.Services
@attribute [StreamRendering]
@inject WineLeaderboardService WineLeaderboardService
@inject ApiHelper ApiHelper
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Wine Leaderboard</PageTitle>

<nav aria-label="Breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item">
            <a>Wine Leaderboard</a>
        </li>
    </ol>
</nav>

<h3>Wine Leaderboard</h3>
<p>Here you can see the leaderboard of wines based on user evaluations.</p>

<hr class="hr" />

@if (_wineLeaderboard == null || !_wineLeaderboard.Any())
{
    <p>
        <em>No data available.</em>
    </p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
            <tr>
                <th>Rank</th>
                <th>Label</th>
                <th>Average Score</th>
                <th>Total Evaluations</th>
            </tr>
            </thead>
            <tbody>
            @for (int i = 0; i < _wineLeaderboard.Count; i++)
            {
                <tr>
                    <td>@(i + 1)</td>
                    <td>@_wineLeaderboard[i].Label</td>
                    <td>@_wineLeaderboard[i].AverageScore.ToString("F2")</td>
                    <td>@_wineLeaderboard[i].TotalEvaluations</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private List<WineLeaderboardDto>? _wineLeaderboard;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _wineLeaderboard = await WineLeaderboardService.GetLeaderboardAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error has occurred: {ex.Message} | {ex.InnerException}");
        }
    }
}
