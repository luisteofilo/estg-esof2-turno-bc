@page "/events"
@inject Frontend.Services.EventService EventService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Frontend.DtoClasses

<PageTitle>Eventos</PageTitle>

<div class="container mt-3">
    <h3>Eventos</h3>

    <button class="btn btn-primary mb-3" @onclick="AddEvent">Adicionar Evento</button>

    @if (events == null)
    {
        <p><em>Carregando...</em></p>
    }
    else if (events.Count == 0)
    {
        <p><em>Nenhum evento encontrado.</em></p>
    }
    else
    {
        <div class="list-group">
            @foreach (var eventDto in events)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <a href="events/@eventDto.Slug" class="text-decoration-none">@eventDto.Name</a>
                    </div>
                    <button class="btn btn-danger btn-sm" @onclick="@(async () => await DeleteEvent(eventDto.Slug))">Apagar</button>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<EventDto> events;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEvents();
    }

    private void AddEvent()
    {
        NavigationManager.NavigateTo("/events/create");
    }

    private async Task DeleteEvent(string slug)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja apagar este evento?");
        if (confirmed)
        {
            await EventService.DeleteEvent(slug);
            events = await EventService.GetEvents(); // Atualizar a lista de eventos
        }
    }
}
