@page "/events"
@inject Frontend.Services.EventService EventService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using Frontend.DtoClasses

<PageTitle>Eventos</PageTitle>

<h3>Eventos</h3>

<NavLink class="btn btn-primary mb-3" href="/events/create">Adicionar Evento</NavLink>

@if (events == null)
{
    <p><em>Carregando...</em></p>
}
else if (events.Count == 0)
{
    <p><em>Nenhum evento encontrado.</em></p>
}
else
{
    <div class="list-group">
        @foreach (var eventDto in events)
        {
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <a href="events/@eventDto.Slug" class="text-decoration-none">@eventDto.Name</a>
                </div>
                <div>
                    <NavLink class="btn btn-secondary btn-sm" href="@($"/events/edit/{eventDto.Slug}")">Editar</NavLink>
                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteEvent(eventDto.Slug)">Apagar</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<EventDto> events;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEvents();
    }

    private async Task ConfirmDeleteEvent(string slug)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja apagar este evento?");
        if (confirmed)
        {
            await DeleteEvent(slug);
        }
    }

    private async Task DeleteEvent(string slug)
    {
        await EventService.DeleteEvent(slug);
        events = await EventService.GetEvents(); // Atualizar a lista de eventos
        StateHasChanged(); // Atualiza a interface
    }

}