@page "/vinhotinder"
@using Frontend.Helpers
@attribute [StreamRendering]
@inject ApiHelper ApiHelper
@inject IJSRuntime JsRuntime

<style>
    .container {
        background-color: lightblue;
        width: 100%;
        height: 90vh;
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .card-container {
        position: relative;
        width: 300px;
        height: 500px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #swiper {
        aspect-ratio: 2/3;
        perspective: 1000px;
        perspective-origin: center 50%;
        transform-style: preserve-3d;
    }

    .card {
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 15px;
       
        filter: drop-shadow(0px 0px 10px #454545);
        background-color: #fff;
        transform: translateZ(calc(-20px * var(--i)))
                    translateY(calc(-5px * var(--i)))
                    rotate(calc(-3deg * var(--i)));
        cursor: pointer;
        user-select: none;
    }

    .card-image {
        width: 100%;
        height: 80%;
        object-fit: cover;
    }

    .card-headers {
        display: flex;
        justify-content: space-around;
        padding: 10px;
    }

    .card-header {
        font-size: 1.2em;
        margin: 0;
        background-color: #fff;
    }
    
    .icons{
        font-size: 40px;
    }
</style>

<PageTitle>Vinho tinder</PageTitle>

<div class="container" id="borders">
    @if (_vinhos == null)
    {
        <p>
            <em>Carregando...</em>
        </p>
    }
    else{
        <button class="btn btn-trash icons" @onclick="HelloWorld">
            <i class="bi bi-trash-fill" style="color: darkgreen"></i>
        </button>
        <div class="d-flex flex-column align-items-center">
            <div class="card-container" id="swiper">
                @{
                    var index = 0;
                }
                @foreach (var wine in _vinhos)
                {
                    <div class="card" data-wine-name="@wine.Name" data-wine-tipo="@wine.Tipo" style="--i: @index">
                        <img src="favicon.png" alt="@wine.Tipo" class="card-image"/>
                        <div class="card-headers">
                            <h3 class="card-header">@wine.Name</h3>
                            <h3 class="card-header">@wine.Tipo</h3>
                        </div>
                    </div>

                    index++;
                }
            </div>

            <button class="btn btn-fire icons mt-5" onclick="handleButtonClick('superLike')">
                <i class="bi bi-fire" style="color: orangered"></i>
            </button>
        </div>
        <button class="btn btn-heart-fill icons" @onclick="Hello">
            <i class="bi bi-heart-fill" style="color: red"></i>
        </button>
        
        <div>
            <input type="text" @bind-value="Name"/>
            <button class="btn btn-primary" @onclick="HelloName"> Hello Name</button>
        </div>
        
    }
</div>

<script src="js/hello.js"></script>

@code {
    private List<VinhoViewModel> _vinhos;
    private List<UserChoice> userChoices;
    string Name = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _vinhos = await ApiHelper.GetFromApiAsync<List<VinhoViewModel>>("vinho");
    }

    private void Test()
    {
        Console.WriteLine("Is this even working?");
    }
    
    private async Task HelloWorld()
    {
        Test();
        try
        {
            Console.WriteLine("Before JavaScript invocation");
            await JsRuntime.InvokeVoidAsync("helloWorld");
            Console.WriteLine("After JavaScript invocation");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error invoking JavaScript function: {ex.Message}");
        }
    }
    
    private async Task HelloName()
    {
        Console.WriteLine("XDDDDDDDDDD");
        await JsRuntime.InvokeVoidAsync("helloName", Name);
        Console.WriteLine("XDDDDDDDDDD");
    }
    
    private async Task Hello()
    {
        Console.WriteLine("XDDDDDDDDDD");
        await JsRuntime.InvokeVoidAsync("Hi");
        Console.WriteLine("XDDDDDDDDDD");
    }
    
    [JSInvokable]
    public void SaveUserChoice(string wineName, int wineTipo, string action)
    {
        userChoices.Add(new UserChoice { WineName = wineName, WineTipo = wineTipo, Action = action });
        Console.WriteLine($"Choice saved: {wineName}, {wineTipo}, {action}");
    }

    public class VinhoViewModel
    {
        public string Name { get; set; }
        public int Tipo { get; set; }
    }
    
    public class UserChoice
    {
        public string WineName { get; set; }
        public int WineTipo { get; set; }
        public string Action { get; set; }
    }

    private void DislikeVinho(VinhoViewModel vinho)
    {
        // Implemente a lógica para desgostar o vinho
    }

    private void LikeVinho(VinhoViewModel vinho)
    {
        // Implemente a lógica para gostar do vinho
    }

    private void LoveVinho(VinhoViewModel vinho)
    {
        // Implemente a lógica para amar o vinho
    }
}
