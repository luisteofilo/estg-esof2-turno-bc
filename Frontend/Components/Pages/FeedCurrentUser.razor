@page "/Feed/User"
@using ESOF.WebApp.WebAPI.DtoClasses
@using Frontend.Helpers
@using global::Helpers.ViewModels
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject ApiHelper ApiHelper

<div class="post">
    <div class="post-header">
        <img src="avatar.jpg" alt="Profile Image" class="profile-image"/>
        <div class="post-info">
            <div class="post-author">@CurrentUser.Email</div>
            <div class="post-meta">@DateTime.Now.ToString("dd/MM/yyyy HH:mm")</div>
        </div>
    </div>
</div>
<hr/>
<div>
    @if (_feedPosts.Posts == null || _feedPosts.Posts.Count == 0)
    {
        <i>No posts available</i>
    }
    else
    {
        @foreach (FeedPost p in _feedPosts.Posts)
        {
            <Post PostLine="p"/>
        }
    }
</div>

@code {
    [Parameter] public string UserEmail { get; set; }
    private FeedPostUser CurrentUser { get; set; } = new FeedPostUser();
    private FeedPostList _feedPosts = new FeedPostList(){Posts = new List<FeedPost>()};

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            var posts = await ApiHelper.GetFromApiAsync<List<FeedPost>>($"api/Post/index/user/id/{UserState.LoggedInUserId.Value}");
            if (posts != null)
            {
                CurrentUser = posts[0].Creator;
                _feedPosts.Posts = posts;
            }
        }
        catch (ApplicationException ex)
        {
            Console.Error.WriteLine($"Failed to fetch posts: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }
}