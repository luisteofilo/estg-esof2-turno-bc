@page "/events/{Slug}"
@inject Frontend.Services.EventService EventService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Frontend.DtoClasses
@using Frontend.Helpers 
@using ZXing
@using ZXing.Common
@using System.Drawing
@using System.Drawing.Imaging
@using System.IO

<PageTitle>Event Detail</PageTitle>

<div class="container mt-4">
    <h3 class="text-center" style="font-size: 3rem;">Event Detail</h3>
    <div class="row">
        <div class="col-md-8">
            @if (eventDto == null)
            {
                <p><em>Event not found or error fetching event details.</em></p>
            }
            else
            {
                <h1 style="font-size: 3rem;">@eventDto.Name</h1>
                <p><strong>Description:</strong> @eventDto.Description</p>
                <p><strong>Blind Tasting:</strong> @(eventDto.BlindTasting ? "Yes" : "No")</p>
                <p><strong>Wine Type:</strong> @eventDto.WineType</p>

                <h4>Participants</h4>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Email</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (participants != null && participants.Count > 0)
                        {
                            @foreach (var participant in participants)
                            {
                                <tr>
                                    <td>@participant.Email</td>
                                    <td><button class="btn btn-danger btn-sm" @onclick="() => RemoveParticipant(participant.EventParticipantId)">Remove</button></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <!-- Adicionar participantes fictícios -->
                            <tr>
                                <td>john.doe@example.com</td>
                                <td><button class="btn btn-danger btn-sm">Remove</button></td>
                            </tr>
                            <tr>
                                <td>jane.doe@example.com</td>
                                <td><button class="btn btn-danger btn-sm">Remove</button></td>
                            </tr>
                            <tr>
                                <td>alice.smith@example.com</td>
                                <td><button class="btn btn-danger btn-sm">Remove</button></td>
                            </tr>
                            <tr>
                                <td>bob.jones@example.com</td>
                                <td><button class="btn btn-danger btn-sm">Remove</button></td>
                            </tr>
                            <tr>
                                <td>charlie.brown@example.com</td>
                                <td><button class="btn btn-danger btn-sm">Remove</button></td>
                            </tr>
                            <tr>
                                <td>diana.ross@example.com</td>
                                <td><button class="btn btn-danger btn-sm">Remove</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        <div class="col-md-4 d-flex flex-column align-items-center">
            @if (eventDto != null)
            {
                <div class="d-flex flex-column align-items-center">
                    <img src="@qrCodeImage" alt="Event QR Code" class="img-fluid mb-3" />
                    <div class="input-group mt-3">
                        <input type="email" class="form-control" @bind="newParticipantEmail" placeholder="Enter email" />
                        <button class="btn btn-primary ml-2" @onclick="AddParticipant">Add Participant</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Slug { get; set; }
    private EventDto eventDto;
    private List<EventParticipantDto> participants;
    private string qrCodeUrl;
    private string qrCodeImage;
    private string newParticipantEmail;

    protected override async Task OnInitializedAsync()
    {
        eventDto = await EventService.GetEventBySlug(Slug);
        if (eventDto != null)
        {
            qrCodeUrl = GenerateQRCodeUrl(eventDto.EventId.ToString());
            qrCodeImage = GenerateQRCodeImage(qrCodeUrl);
            participants = await EventService.GetParticipants(eventDto.EventId);
        }
    }

    private string GenerateQRCodeUrl(string eventId)
    {
        if (UserState.LoggedInUserId.HasValue)
        {
            return $"http://localhost:5295/api/events/register/{eventId}/{UserState.LoggedInUserId.Value}";
        }
        else
        {
            return "http://localhost:5295/login";
        }
    }

    private string GenerateQRCodeImage(string url)
    {
        var writer = new BarcodeWriterPixelData
        {
            Format = BarcodeFormat.QR_CODE,
            Options = new EncodingOptions
            {
                Height = 250,
                Width = 250,
                Margin = 1,
                PureBarcode = true
            }
        };

        var pixelData = writer.Write(url);

        using (var bitmap = new Bitmap(pixelData.Width, pixelData.Height, PixelFormat.Format32bppRgb))
        {
            var bitmapData = bitmap.LockBits(new Rectangle(0, 0, pixelData.Width, pixelData.Height), ImageLockMode.WriteOnly, PixelFormat.Format32bppRgb);
            try
            {
                System.Runtime.InteropServices.Marshal.Copy(pixelData.Pixels, 0, bitmapData.Scan0, pixelData.Pixels.Length);
            }
            finally
            {
                bitmap.UnlockBits(bitmapData);
            }

            using (var memoryStream = new MemoryStream())
            {
                bitmap.Save(memoryStream, ImageFormat.Png);
                return $"data:image/png;base64,{Convert.ToBase64String(memoryStream.ToArray())}";
            }
        }
    }

    private async Task AddParticipant()
    {
        var userId = await LookupUserIdByEmail(newParticipantEmail);
        if (userId != Guid.Empty)
        {
            await EventService.AddParticipant(eventDto.EventId, userId);
            participants = await EventService.GetParticipants(eventDto.EventId);
        }
    }

    private async Task RemoveParticipant(Guid participantId)
    {
        await EventService.RemoveParticipant(eventDto.EventId, participantId);
        participants = await EventService.GetParticipants(eventDto.EventId);
    }

    private async Task<Guid> LookupUserIdByEmail(string email)
    {
        return Guid.NewGuid();
    }

    private void EditEvent()
    {
        NavigationManager.NavigateTo($"/events/edit/{Slug}");
    }
}