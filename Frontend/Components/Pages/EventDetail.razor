@page "/events/{Slug}"
@inject Services.EventService EventService
@inject IJSRuntime JSRuntime
@using Frontend.DtoClasses
@using System.Drawing 
@using System.Drawing.Imaging
@using Frontend.Helpers
@using ZXing
@using ZXing.Common


<PageTitle>Event Detail</PageTitle>

<h3>Event Detail</h3>

@if (eventDto == null)
{
    <p><em>Event not found or error fetching event details.</em></p>
}
else
{
    <h4>@eventDto.Name</h4>
    <p>ID: @eventDto.EventId</p>
    <div>
        <img src="@qrCodeImage" alt="Event QR Code" />
        <p>URL: @qrCodeUrl</p>
    </div>
}

@code {
    [Parameter]
    public string Slug { get; set; }
    private EventDto eventDto;
    private string qrCodeUrl;
    private string qrCodeImage;

    protected override async Task OnInitializedAsync()
    {
        eventDto = await EventService.GetEventBySlug(Slug);
        if (eventDto != null)
        {
            qrCodeUrl = GenerateQRCodeUrl(eventDto.EventId.ToString());
            qrCodeImage = GenerateQRCodeImage(qrCodeUrl);
        }
    }

    private string GenerateQRCodeUrl(string eventId)
    {
        if (UserState.LoggedInUserId.HasValue)
        {
            return $"http://localhost:5295/api/events/register/{eventId}/{UserState.LoggedInUserId.Value}";
        }
        else
        {
            return "http://localhost:5295/login";
        }
    }

    private string GenerateQRCodeImage(string url)
    {
        // Create a barcode writer instance for QR codes
        var writer = new BarcodeWriterPixelData
        {
            Format = BarcodeFormat.QR_CODE,
            Options = new EncodingOptions
            {
                Height = 250,
                Width = 250,
                Margin = 1,
                PureBarcode = true
            }
        };

        // Generate QR code pixel data
        var pixelData = writer.Write(url);

        // Convert pixel data to Bitmap and then to a Base64 string
        using (var bitmap = new Bitmap(pixelData.Width, pixelData.Height, PixelFormat.Format32bppRgb))
        {
            // Lock the bits of the bitmap
            var bitmapData = bitmap.LockBits(new Rectangle(0, 0, pixelData.Width, pixelData.Height), ImageLockMode.WriteOnly, PixelFormat.Format32bppRgb);
            try
            {
                // Transfer the byte data to the bitmap
                System.Runtime.InteropServices.Marshal.Copy(pixelData.Pixels, 0, bitmapData.Scan0, pixelData.Pixels.Length);
            }
            finally
            {
                // Unlock the bits.
                bitmap.UnlockBits(bitmapData);
            }

            // Convert to base64 string
            using (var memoryStream = new MemoryStream())
            {
                bitmap.Save(memoryStream, ImageFormat.Png);
                return $"data:image/png;base64,{Convert.ToBase64String(memoryStream.ToArray())}";
            }
        }
    }
}
