@page "/events/edit/{slug}"
@inject Frontend.Services.EventService EventService
@inject NavigationManager NavigationManager
@using Frontend.DtoClasses

<PageTitle>Edit Event</PageTitle>

<div class="container mt-4">
    <h3 class="text-center" style="font-size: 3rem;">Edit Event</h3>
    @if (_event == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div>
            @if (!string.IsNullOrEmpty(_error))
            {
                <div class="alert alert-danger">@_error</div>
            }

            <div class="mb-3">
                <label for="name" class="form-label">Event Name</label>
                <input id="name" class="form-control" @bind="_event.Name" />
            </div>

            <div class="mb-3">
                <label for="slug" class="form-label">Event Slug</label>
                <input id="slug" class="form-control" @bind="_event.Slug" disabled />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <input id="description" class="form-control" @bind="_event.Description" />
            </div>

            <div class="mb-3">
                <label for="blindTasting" class="form-label">Blind Tasting</label>
                <input id="blindTasting" type="checkbox" @bind="_event.BlindTasting" />
            </div>

            <div class="mb-3">
                <label for="wineType" class="form-label">Wine Type</label>
                <input id="wineType" class="form-control" @bind="_event.WineType" />
            </div>

            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-primary me-3" @onclick="() => { UpdateEvent(); }"> Save</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Slug { get; set; }

    private EventDto? _event;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        if (Slug != null)
        {
            Console.WriteLine($"Fetching event with slug: {Slug}"); // Log para depuração
            try
            {
                _event = await EventService.GetEventBySlug(Slug);
                if (_event != null)
                {
                    Console.WriteLine($"Event fetched: {_event.Name}"); // Log para depuração
                }
                else
                {
                    Console.WriteLine("Event not found."); // Log para depuração
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching event: {ex.Message}"); // Log para depuração
                _error = "Error loading event.";
            }
        }
    }

    private async Task UpdateEvent()
    {
        if (_event != null)
        {
            _error = string.Empty;

            try
            {
                Console.WriteLine($"Updating event with slug: {_event.Slug}"); // Log para depuração
                await EventService.UpdateEvent(_event);
                Console.WriteLine($"Event updated successfully: {_event.Slug}"); // Log para depuração
                NavigationManager.NavigateTo("/events");
            }
            catch (Exception e)
            {
                _error = e.Message;
                Console.WriteLine($"Error updating event: {_error}"); // Log para depuração
            }
        }
    }
}