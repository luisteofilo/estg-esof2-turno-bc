@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h1 class="card-title">Weather</h1>
                    <p class="card-text">This component demonstrates showing data.</p>

                    @if (forecasts == null)
                    {
                        <p>
                            <em>Loading...</em>
                        </p>
                    }
                    else
                    {
                        <table class="table table-striped table-hover">
                            <thead class="thead-dark">
                            <tr>
                                <th scope="col">Date</th>
                                <th scope="col">Temp. (C)</th>
                                <th scope="col">Temp. (F)</th>
                                <th scope="col">Summary</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var forecast in forecasts)
                            {
                                <tr>
                                    <td>@forecast.Date.ToShortDateString()</td>
                                    <td>@forecast.TemperatureC</td>
                                    <td>@forecast.TemperatureF</td>
                                    <td>@forecast.Summary</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
// Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}