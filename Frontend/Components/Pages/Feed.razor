@page "/Feed"
@using Frontend.Helpers
@using global::Helpers.ViewModels
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject ApiHelper ApiHelper
<h3>Feed</h3>
<div>
    <div class=feed-create-post>
        @* <button id="createPostButton" class="btn btn-primary" data-bs-toggle="display">Criar uma publicação</button> *@
        @* <div id="createPostModal" class="modal"> *@
        @*     <div class="modal-content"> *@
        @*         <span class="close">&times;</span> *@
        @*         <InputText @bind-Value="_newPost.Text"/> *@
        @*         <p>baixo</p> *@
        @*     </div> *@
        @* </div> *@
    </div>
    <hr/>
</div>
<div>
    @if (_feedPosts.Posts.Count == 0)
    {
        <h4>Não há posts</h4>
    }
    else
    {
        @foreach (FeedPost p in _feedPosts.Posts)
        {
            <Post PostLine="p"/>
        }
    }
</div>


@code
{
    // private FeedPostUser _currentUser = new FeedPostUser();
    // UserState contém o id do utilizador que existe
    private FeedPost _newPost = new FeedPost();
    private FeedPostList _feedPosts = new FeedPostList(){Posts = new List<FeedPost>()};

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _feedPosts.Posts = await ApiHelper.GetFromApiAsync<List<FeedPost>>("api/Post/index");
        }
        catch (ApplicationException ex)
        {
            Console.Error.WriteLine($"Failed to fetch posts: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task CreatePost()
    {
        _newPost.CreatorId = UserState.LoggedInUserId.Value;
        await ApiHelper.PostToApiAsync<FeedPost>("api/Post/create", _newPost);
    }
}

